1，单一职责原则：
	就一个类而言，应该仅有一个引起它变化的原因。
	如果一个类承担的职责过多，就等于吧这个职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化
	发生时，设计会到遭受到意想不到的破坏。
	
2，开放-封闭原则：
	软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。
	对扩展开放，对更改封闭。
	
3，依赖倒转原则
	高层模块不应该依赖底层模块，两个都应该依赖抽象。
	抽象不应该依赖细节，细节应该依赖抽象。
	
4，里氏代换原则
	子类型必须能够替换掉他们的父类型。
	只有子类可以替换掉父类，软件单位的功能不收影响时，父类才能真正被复用，而子类才能够在父类的基础上增加新的行为。
	
5,迪米特法则,也叫最少知识原则
	如果两个类不必彼此直接通信,那么这两个类就不应该发生直接的互相作用.如果其中一个类需要调用另一个类中的方法的话,可以通过第三方类转发这个调用.
	在类的结构设计上,每个类都应当尽量降低成员的访问权限.
	强调类之间的松耦合.类之间的耦合越弱,越有利于复用,一个处在弱耦合的类被修改,不会对有关系的类造成波及.			
	
6，合成/聚合复用原则
	尽量使用合成聚合，不要使用类继承。
	聚合表示一种弱拥有关系，提现的是a对象可以包含b对象，但b对象不是a对象的一部分；
	合成是强拥有关系，体现了严格的部分和整体的关系，部分和整体的声明周期一样。
	